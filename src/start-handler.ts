import { Bot, CommandContext, Context } from 'grammy';
import { getMode, setMode, updateUserBusinessConnection } from './ydb';
import { formatMarkdownV2Text, escapeMarkdownV2 } from './telegram-utils';
import { startQuizWithFreshConfig, startQuizWithFreshConfigForUser } from './quiz-handler';

/**
 * –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è MarkdownV2 —Å –≥–æ—Ç–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
export function createSafeMarkdownV2Message(ctx: CommandContext<Context>) {
    const title = formatMarkdownV2Text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤!', { bold: true });
    const subtitle = formatMarkdownV2Text('–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:', { bold: true });
    const instruction = formatMarkdownV2Text('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:', { bold: true });
    const guide = formatMarkdownV2Text('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:', { bold: true });
    const guideSubtitle = formatMarkdownV2Text(`–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –∞–¥–º–∏–Ω–∫—É –±–æ—Ç–∞ —Å –±–∏–∑–Ω–µ—Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: @${ctx.from?.username === 'm2assist' ? 'petrovpaveld' : 'm2assist'}`, { italic:true });
    const final = formatMarkdownV2Text('–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–∞—à–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏!', { bold: true });
    
    return (
        `üè¢ ${title}\n\n` +
        `üìà ${subtitle}\n` +
        `‚Ä¢ ${escapeMarkdownV2('–£–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ')}\n` +
        `‚Ä¢ ${escapeMarkdownV2('–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ 24/7')}\n` +
        `‚Ä¢ ${escapeMarkdownV2('–°–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤')}\n` +
        `‚Ä¢ ${escapeMarkdownV2('–ü–æ–≤—ã—à–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é –∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å')}\n\n` +
        `üîó ${instruction}\n` +
        `1Ô∏è‚É£ ${escapeMarkdownV2('–ü–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—à –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç –≤ Telegram')}\n` +
        `2Ô∏è‚É£ ${escapeMarkdownV2('–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∫ –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É')}\n\n` +
        `üìã ${guide}\n` +
        `‚Ä¢ ${escapeMarkdownV2('–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram')}\n` +
        `‚Ä¢ ${escapeMarkdownV2('–í—ã–±–µ—Ä–∏—Ç–µ "–ë–∏–∑–Ω–µ—Å"')}\n` +
        `‚Ä¢ ${escapeMarkdownV2('–ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "–ß–∞—Ç-–±–æ—Ç—ã"')}\n` +
		`‚Ä¢ ${escapeMarkdownV2('–î–æ–±–∞–≤—å—Ç–µ @' + (ctx.me?.username || '—ç—Ç–æ–≥–æ_–±–æ—Ç–∞'))}\n\n` +
		`üìã ${guideSubtitle}\n` +
        `‚úÖ ${final}`
    );
}

export function initializeStartCommand(bot: Bot) {
    bot.command('start', async (ctx) => {
        const userId = ctx.from?.id;
        if (!userId) {
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.');
            return;
        }

        try {
            if (await getMode(userId) === 'first-start') {
                await setMode(userId, 'first-start');
                await ctx.reply(
                    createSafeMarkdownV2Message(ctx),
                    { parse_mode: 'MarkdownV2' }
                );
            }
            
        } catch (error) {
            console.error('Error in start command:', JSON.stringify(error));
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è business_message
    bot.on('business_message', async (ctx, next) => {
        try {
            const businessMessage = ctx.businessMessage;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ chat.username —Ä–∞–≤–µ–Ω m2assist
            if (businessMessage?.chat?.username === 'm2assist' || businessMessage?.chat?.username === 'petrovpaveld') {
                const businessConnectionId = businessMessage.business_connection_id;
                const userId = businessMessage.from?.id;
                
                // Ensure userId is a valid number
                if (!userId || typeof userId !== 'number') {
                    console.error('Invalid userId from business message:', userId);
                    return;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º business_connection_id –≤ —Ç–∞–±–ª–∏—Ü–µ users
                if (businessConnectionId) {
                    await updateUserBusinessConnection(userId, businessConnectionId);
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å business_connection_id –∏ from.id
                const responseText = `–í–∞—à –±–∏–∑–Ω–µ—Å –∞–∫–∫–∞—É–Ω—Ç —Å–≤—è–∑–∞–Ω —Å –ø–∞–Ω–µ–ª—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Ç–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏ –±–æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç`;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–≥–æ –±–æ—Ç–∞
                await bot.api.sendMessage(userId, responseText);
                await setMode(userId, 'quiz');
                await startQuizWithFreshConfigForUser(userId);
            } else {
                await next();
            }
        } catch (error) {
            console.error('Error in business_message handler:', JSON.stringify(error));
        }
    });
}
