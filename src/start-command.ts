import { Bot, CommandContext, Context, InlineKeyboard } from 'grammy';
import { getMode, setMode, updateUserBusinessConnection } from './ydb';
import { formatMarkdownV2Text, escapeMarkdownV2 } from './telegram-utils';
import { startQuizWithFreshConfig } from './quiz-handler';

/**
 * –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è MarkdownV2 —Å –≥–æ—Ç–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
export function createSafeMarkdownV2Message(ctx: CommandContext<Context>) {
    const title = formatMarkdownV2Text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤!', { bold: true });
    const subtitle = formatMarkdownV2Text('–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:', { bold: true });
    const instruction = formatMarkdownV2Text('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:', { bold: true });
    return (
        `üè¢ ${title}\n\n` +
        `üìà ${subtitle}\n` +
        `‚Ä¢ ${escapeMarkdownV2('–£–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ')}\n` +
        `‚Ä¢ ${escapeMarkdownV2('–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ 24/7')}\n` +
        `‚Ä¢ ${escapeMarkdownV2('–°–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤')}\n` +
        `‚Ä¢ ${escapeMarkdownV2('–ü–æ–≤—ã—à–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é –∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å')}\n\n` +
        `üîó ${escapeMarkdownV2('–ü—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å–Ω–∏–∫, —á—Ç–æ–±—ã –±–æ—Ç –ø–æ–¥—Å—Ç—Ä–æ–∏–ª—Å—è –ø–æ–¥ –≤–∞—à–∏ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã')}\n\n`
    );
}

export function initializeStartCommand(bot: Bot) {
    bot.command('start', async (ctx) => {
        const userId = ctx.from?.id;
        if (!userId) {
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.');
            return;
        }

        try {
            if (await getMode(userId) === 'none') {
                await setMode(userId, 'start');
                
                // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
                const keyboard = new InlineKeyboard()
                    .text('üìù –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å–Ω–∏–∫', 'start_quiz');
                
                await ctx.reply(
                    createSafeMarkdownV2Message(ctx),
                    { 
                        parse_mode: 'MarkdownV2',
                        reply_markup: keyboard
                    }
                );
            }
            
        } catch (error) {
            console.error('Error in start command:', JSON.stringify(error));
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å–Ω–∏–∫"
    bot.callbackQuery('start_quiz', async (ctx) => {
        const userId = ctx.from?.id;
        if (!userId) {
            await ctx.answerCallbackQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.');
            return;
        }

        try {
            await setMode(userId, 'quiz');
            await startQuizWithFreshConfig(userId);
            await ctx.answerCallbackQuery('–û–ø—Ä–æ—Å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω!');
        } catch (error) {
            console.error('Error starting quiz:', JSON.stringify(error));
            await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞.');
        }
    });
    

}
