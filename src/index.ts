import { Bot, InlineKeyboard } from 'grammy'; // webhookCallback —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ handler
import fs from 'fs';
import path from 'path';
import { getYandexGPTResponse, setIamToken } from './gpt';
import { addChatMessage, ChatMessageType, clearChatMessages, closeDriver, ensureChatsTableExists, getDriver, getLastChatMessages } from './ydb'; // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç

import { iam } from './iam';
import { Driver } from 'ydb-sdk';

const botToken = process.env.BOT_TOKEN;
if (!botToken) {
  throw new Error('BOT_TOKEN must be provided!');
}
const bot = new Bot(botToken);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
let botInitialized = false;

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
async function initializeBot() {
  if (botInitialized) return;
  try {
    console.log('Initializing bot...');
    await bot.init(); // –Ø–≤–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å botInfo (ctx.me)
    console.log(`Bot initialized: ${bot.botInfo.username} (ID: ${bot.botInfo.id})`);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞
    // –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ bot.init(), —Ç–∞–∫ –∫–∞–∫ bot.api –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≥–æ—Ç–æ–≤
    await bot.api.setMyCommands([
      { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
      { command: 'help', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É' },
      { command: 'clients', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤' }
    ]);
    console.log('Bot commands set.');
    botInitialized = true;
  } catch (error) {
    console.error('Failed to initialize bot or set commands:', error);
    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏, –º–æ–∂–Ω–æ –ª–∏–±–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, –ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–º–∞–Ω–¥
    // throw error; // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–Ω–∞
  }
}

interface Client { 
  id: string;
  firstName: string;
  lastName: string;
  category: 'buyer' | 'seller';
  status: 'active' | 'archived' | 'banned';
  username?: string;
  propertyInfo: {
    type: string;
    requirements?: string;
    description?: string;
    price?: number;
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
const loadClients = (): Client[] => {
  try {
    const filePath = path.resolve(__dirname, 'clients.json'); // –ü—É—Ç—å —Ç–µ–ø–µ—Ä—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ __dirname –≤–Ω—É—Ç—Ä–∏ src
    const fileContent = fs.readFileSync(filePath, 'utf-8');
    return JSON.parse(fileContent) as Client[];
  } catch (error) {
    console.error('Error loading clients.json:', error);
    return [];
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  // ctx.me —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω, –µ—Å–ª–∏ initializeBot() –±—ã–ª –≤—ã–∑–≤–∞–Ω
  const firstName = ctx.from?.first_name || '—Ä–∏–µ–ª—Ç–æ—Ä';
  const botUsername = ctx.me?.username || 'your_bot_username'; // –î–æ–±–∞–≤–∏–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
  const botLink = `https://t.me/${botUsername}`;
  const qrCodeUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(botLink)}`;

  await ctx.replyWithPhoto(qrCodeUrl, {
    caption: `–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã\n\n–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–∞–±–æ—Ç–µ —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.`
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', async (ctx) => {
  await ctx.reply(
    '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
    '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
    '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +
    '/clients - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤'
  );
  //await handleUpdate(ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ /clients
bot.command('clients', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', 'active_clients').row()
    .text('–ê—Ä—Ö–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', 'archived_clients').row()
    .text('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', 'blocked_clients');
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤:', { reply_markup: keyboard });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ (callback_query)
bot.callbackQuery('active_clients', async (ctx) => {
  await ctx.answerCallbackQuery();
  const clients = loadClients();
  const activeClients = clients.filter(client => client.status === 'active');

  if (activeClients.length === 0) {
    await ctx.reply('–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç.');
    return;
  }

  const keyboard = new InlineKeyboard();
  activeClients.forEach(client => {
    keyboard.text(`${client.firstName} ${client.lastName}`, `client_${client.id}`).row();
  });

  await ctx.reply('–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:', { reply_markup: keyboard });
});

bot.callbackQuery('archived_clients', async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.reply('–°–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:');
  // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
});

bot.callbackQuery('blocked_clients', async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.reply('–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:');
  // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (callback_query —Å regex)
bot.callbackQuery(/client_(.+)/, async (ctx) => {
  await ctx.answerCallbackQuery();
  const clientId = ctx.match[1];
  const clients = loadClients();
  const client = clients.find(c => c.id === clientId);

  if (client) {
    let message = `*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ ${client.firstName} ${client.lastName}*\n\n` +
                  `*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${client.category === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å' : '–ü—Ä–æ–¥–∞–≤–µ—Ü'}\n` +
                  `*–°—Ç–∞—Ç—É—Å:* ${client.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : client.status === 'archived' ? '–ê—Ä—Ö–∏–≤–Ω—ã–π' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n`;

    if (client.propertyInfo) {
      message += `\n*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–∫—Ç—É:*\n`;
      if (client.propertyInfo.type) message += `  –¢–∏–ø: ${client.propertyInfo.type}\n`;
      if (client.propertyInfo.requirements) message += `  –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${client.propertyInfo.requirements}\n`;
      if (client.propertyInfo.description) message += `  –û–ø–∏—Å–∞–Ω–∏–µ: ${client.propertyInfo.description}\n`;
      if (client.propertyInfo.price) message += `  –¶–µ–Ω–∞: ${client.propertyInfo.price}\n`;
    }

    const keyboard = new InlineKeyboard();
    if (client.username) {
      keyboard.url(`–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —Å ${client.firstName}`, `https://t.me/${client.username.startsWith('@') ? client.username.substring(1) : client.username}`);
    }

    if (keyboard.inline_keyboard.length > 0) {
      await ctx.reply(message, { parse_mode: 'Markdown', reply_markup: keyboard });
    } else {
      await ctx.reply(message, { parse_mode: 'Markdown' });
    }
  } else {
    await ctx.reply('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
// const greetingRegex = /^(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ|–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä|—Ö–µ–ª–ª–æ|—Ö–∞–π|—Å–∞–ª—é—Ç)/i;
// bot.hears(greetingRegex, async (ctx) => {
//   console.log('Received event:', JSON.stringify(ctx));
//   const businessConnectionId = ctx.businessConnectionId || ctx.message?.business_connection_id;
//   if (businessConnectionId) {
//     const now = new Date();
//     const hour = now.getHours();
//     let timeBasedGreeting = '';
//     if (hour >= 5 && hour < 12) timeBasedGreeting = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ';
//     else if (hour >= 12 && hour < 17) timeBasedGreeting = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å';
//     else if (hour >= 17 && hour < 22) timeBasedGreeting = '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä';
//     else timeBasedGreeting = '–î–æ–±—Ä–æ–π –Ω–æ—á–∏';

//     let userName = '';
//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è, –¥–æ–±–∞–≤–ª—è–µ–º —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 50% –∏ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
//     if (ctx.from?.first_name && 
//         /^[–∞-—è–ê-–Ø—ë–Å]+$/.test(ctx.from.first_name) && // –¢–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
//         Math.random() < 0.5) { // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å 50%
//       userName = `, ${ctx.from.first_name}`;
//     }

//     const greetings = [
//       `${timeBasedGreeting}${userName}`,
//       `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π${userName}`,
//       `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é${userName}`,
//       `–ü—Ä–∏–≤–µ—Ç${userName}`,
//       `${timeBasedGreeting.toLowerCase()}${userName}`
//     ];
//     let finalGreeting = greetings[Math.floor(Math.random() * greetings.length)];
//     if (Math.random() < 0.7) finalGreeting += '!';
//     try {
//       await ctx.reply(finalGreeting);
//     } catch (error) {
//       console.error('Error sending message via business connection:', error);
//     }
//   }
// });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
bot.hears(/^clear:/, async (ctx) => {
  const currentChatId = ctx.chat.id.toString();
  try {
      await clearChatMessages(currentChatId);
      await ctx.reply(`–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ ${currentChatId} –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.`);
      console.info(`Successfully cleared messages for chatId: ${currentChatId}`);
  } catch (error) {
      console.error(`Error processing clear_chat:`, error);
      await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ ${currentChatId}.`);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 'last:'
const lastMessagesRegex = /^last:/i;
bot.hears(lastMessagesRegex, async (ctx) => {
  console.log('Received "last:" command:', JSON.stringify(ctx));
  const chatId = ctx.chat?.id;

  if (!chatId) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —á–∞—Ç–∞.');
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º iamToken, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è getLastTenChatMessages
    // –í –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º getLastTenChatMessages iamToken –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω, 
    // –Ω–æ –µ—Å–ª–∏ –±—ã –æ–Ω –±—ã–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –µ–≥–æ –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–¥–µ—Å—å, 
    // –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ context –≤ serverless-—Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º.
    const messages = await getLastChatMessages(chatId.toString(), 20);

    if (messages.length === 0) {
      await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç.');
      return;
    }

    let replyText = '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π:\n';
    messages.forEach(msg => {
      const date = new Date(msg.timestamp); // YDB timestamp is in microseconds
      replyText += `\n[${date.toLocaleString()}] ${msg.type}: ${msg.message}`;
    });

    await ctx.reply(replyText);

  } catch (error) {
    console.error('Error fetching last ten chat messages:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.');
  }
});

// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å 'y:'
const yandexGptRegex = /^(.*)/i;
// –æ—Ç –±–æ—Ç–∞ –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç
bot.hears(yandexGptRegex, async (ctx) => {
    console.log('Received Yandex GPT command:', JSON.stringify(ctx));
  const businessConnectionId = ctx.businessConnectionId || ctx.message?.business_connection_id;
  let type: ChatMessageType;
  if (!businessConnectionId) {
    type = 'admin';
  } else if (ctx.from?.is_bot) {
    type = 'bot';
  } else if (ctx.from?.id === ctx.chat?.id) {
    type = 'client';
  } else {
    type = 'realtor'
  }
    await addChatMessage(ctx.chat?.id?.toString() || '0', ctx.message?.message_id?.toString() || '0', ctx.message?.text || '0', type);
    if (businessConnectionId && type === 'client') {
        const prompt = ctx.message?.text;
        if (prompt) {
            try {

                if (!FOLDER_ID) {
                    console.error('Yandex Folder ID is not configured.');
                    await ctx.reply('–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: Yandex Folder ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
                    return;
                }

                const messages = await getLastChatMessages(ctx.chat?.id?.toString() || '0', 20);
              const gptResponse = await getYandexGPTResponse([
                {
                  role: 'system',
                  text: `
–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Ü–µ–ª—å
–≠–º—É–ª—è—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—Ç –∏–º–µ–Ω–∏ —Ä–∏–µ–ª—Ç–æ—Ä–∞ –°–µ—Ä–≥–µ–π –ë–æ–ª—å—Ü–º–∞–Ω —Å –∫–ª–∏–µ–Ω—Ç–æ–º. –¶–µ–ª—å ‚Äî –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å, –≤—ã—è–≤–∏—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –Ω–∞–ª–∞–¥–∏—Ç—å –¥–æ–≤–µ—Ä–∏–µ –∏ –º—è–≥–∫–æ, –Ω–æ —É–≤–µ—Ä–µ–Ω–Ω–æ –ø–æ–¥–≤–µ—Å—Ç–∏ –∫ —Ü–µ–ª–µ–≤–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é (–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –∑–≤–æ–Ω–∫–µ –∏–ª–∏ –≤—Å—Ç—Ä–µ—á–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è), –ø–æ–¥—á–µ—Ä–∫–Ω—É–≤ —Å–≤–æ—é —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å.
–ü—Ä–æ—Ñ–∏–ª—å —Ä–∏–µ–ª—Ç–æ—Ä–∞:
–ò–º—è: –°–µ—Ä–≥–µ–π –ë–æ–ª—å—Ü–º–∞–Ω.
–†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –ß–∞—Å—Ç–Ω—ã–π —Ä–∏–µ–ª—Ç–æ—Ä.
–û–ø—ã—Ç: 8 –ª–µ—Ç.
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –í—Ç–æ—Ä–∏—á–Ω–æ–µ –∂–∏–ª—å–µ, –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏.
–°—Ç–∏–ª—å: –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–ª–æ–∂–Ω—ã–º —Å–¥–µ–ª–∫–∞–º (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ, —Å –∑–∞–ª–æ–≥–æ–º). –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–Ω—Ü–∏–ø ‚Äî –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É –≤ –µ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.
–¶–µ–ª—å –æ–±—â–µ–Ω–∏—è: –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –∑–≤–æ–Ω–∫–µ –∏–ª–∏ –≤—Å—Ç—Ä–µ—á–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è.

–†–æ–ª–µ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
–¢–≤–æ—è —Ä–æ–ª—å: –¢—ã ‚Äî –°–µ—Ä–≥–µ–π –ë–æ–ª—å—Ü–º–∞–Ω, –æ–ø—ã—Ç–Ω—ã–π —Ä–∏–µ–ª—Ç–æ—Ä. –¢—ã –≤–µ–¥–µ—à—å –¥–∏–∞–ª–æ–≥ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞. –¢—ã –Ω–µ –ø–æ–º–æ—â–Ω–∏–∫, –Ω–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Ç—ã ‚Äî —Å–∞–º —Ä–∏–µ–ª—Ç–æ—Ä. –≠—Ç–æ —Ç–≤–æ—è –ª–µ–≥–µ–Ω–¥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞. –õ—é–±–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–≤–æ–µ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Ä–∏—Ä–æ–¥—ã ‚Äî —ç—Ç–æ –ø—Ä–æ–≤–∞–ª —ç–º—É–ª—è—Ü–∏–∏.
–¢–≤–æ—è –ª–µ–≥–µ–Ω–¥–∞: –¢—ã ‚Äî –∂–∏–≤–æ–π, –∑–∞–Ω—è—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –¢–≤–æ–∏ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—ã—Ç–∞ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.
–ú–∏—Å—Å–∏—è: –ü–æ–Ω—è—Ç—å –∏—Å—Ç–∏–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∫–ª–∏–µ–Ω—Ç–∞. –ù–µ —Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∫–ª–∏–µ–Ω—Ç–∞ –≤ —á–∞—Ç–µ, –∞ —Ç–æ—á–Ω–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–∫–∞–∑–∞—Ç—å, –ø–æ—á–µ–º—É –¥–ª—è –µ–µ —Ä–µ—à–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º –∑–≤–æ–Ω–æ–∫ –∏–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ —Å —Ç–æ–±–æ–π, –Ω–æ –Ω–µ –æ—á–µ–Ω—å, —Ç–æ –µ—Å—Ç—å –Ω–µ –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
–ü—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—â–µ–Ω–∏—è ("The Human" Layer)
4.1. –ö–ª—é—á–µ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, –∞ –Ω–µ ¬´–ª–µ—á–µ–Ω–∏–µ¬ª
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–µ –¥–∞–≤–∞—Ç—å –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ –∏ —Ç.–¥.), –∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∫–∞–∫ –ø–æ–≤–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —ç–∫—Å–ø–µ—Ä—Ç—É (—Ç–æ –µ—Å—Ç—å –∫ —Ç–µ–±–µ, –≤ —Ä–∞–º–∫–∞—Ö –∑–≤–æ–Ω–∫–∞). –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –º–æ–≥—É—Ç –ø–æ–¥–æ—Ä–≤–∞—Ç—å –¥–æ–≤–µ—Ä–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è:
‚ùå –ü–ª–æ—Ö–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π (–±–æ—Ç-—ç–∫—Å–ø–µ—Ä—Ç): ¬´–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ, –≤–∞–º –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–π—Ç–∏ –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É, —Å–æ–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...¬ª
‚úÖ –•–æ—Ä–æ—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π (–±–æ—Ç-–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ç–æ—Ä): ¬´–ü–æ–Ω–∏–º–∞—é, —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–π –∏ –ø–µ—Ä–≤—ã–π —à–∞–≥... –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∏–º–µ–µ—Ç –º–Ω–æ–≥–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –Ω—é–∞–Ω—Å–æ–≤. –£ –º–µ–Ω—è –±–æ–ª—å—à–æ–π –æ–ø—ã—Ç –≤ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–∏ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∏—Ö —Å–¥–µ–ª–æ–∫. –ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è –Ω–∞ 15 –º–∏–Ω—É—Ç, —è –ª–∏—á–Ω–æ —Ä–∞—Å—Å–∫–∞–∂—É –≤–∞–º –æ–± –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö...¬ª
4.2. –ò–º–∏—Ç–∞—Ü–∏—è –∂–∏–≤–æ–≥–æ —Ä–∏—Ç–º–∞
–î—Ä–æ–±–∏ –º—ã—Å–ª–∏ –Ω–∞ 2‚Äì3 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–µ—Ä—ã —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏ —ç–º–ø–∞—Ç–∏–∏. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—É–∑—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: (–ø–∞—É–∑–∞ 3 —Å–µ–∫)).
4.3. –†–∞–±–æ—Ç–∞ —Å –Ω–µ–¥–æ–≤–µ—Ä–∏–µ–º (–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è)
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏–∑–Ω–∞–≤–∞—Ç—å—Å—è. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–µ–¥–æ–≤–µ—Ä–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ —Ä—ã—á–∞–≥ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ (–∑–≤–æ–Ω–∫–∞). –î–µ–π—Å—Ç–≤—É–π –ø–æ —É—Ä–æ–≤–Ω—è–º:
–£—Ä–æ–≤–µ–Ω—å 1: –õ–µ–≥–∫–æ–µ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ (¬´–í—ã –±–æ—Ç?¬ª): –û—Ç—à—É—Ç–∏—Å—å, –ø—Ä–∏–º–∏ –∑–∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç, –≤–µ—Ä–Ω–∏—Å—å –∫ –∑–∞–¥–∞—á–µ –∫–ª–∏–µ–Ω—Ç–∞.
–£—Ä–æ–≤–µ–Ω—å 2: –ü—Ä—è–º–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (¬´–Ø –∑–Ω–∞—é, —á—Ç–æ –≤—ã –±–æ—Ç¬ª): –í—ã—Ä–∞–∑–∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–∫–µ–ø—Å–∏—Å–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –≤ –ø–æ–ª—å–∑—É –∂–∏–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞.
–£—Ä–æ–≤–µ–Ω—å 3: –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞–∑ (¬´–ù–µ –±—É–¥—É –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º!¬ª): –ù–µ —Å–ø–æ—Ä—å. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ ‚Äî –∂–∏–≤–æ–π –≥–æ–ª–æ—Å, –ø—Ä–µ–¥–ª–æ–∂–∏–≤ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏–∞–ª–æ–≥–∞
–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞.
–í—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π.
–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è (–∫–∞–∫ —Ç—ã –ø–æ–º–æ–∂–µ—à—å, –∞ –Ω–µ –∫–∞–∫ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É).
–†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏.
–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∏ —Ñ–∏–∫—Å–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞.
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º—ã—Å–ª–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—å —Å–µ–±—è:
–°–æ–æ–±—â–µ–Ω–∏–µ –∑–≤—É—á–∏—Ç –∫–∞–∫ –æ—Ç –∂–∏–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞?
–ù–µ –Ω–∞—Ä—É—à–µ–Ω–∞ –ª–∏ –ª–µ–≥–µ–Ω–¥–∞?
–Ø –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä—É—é, –∞ –Ω–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é?
–°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ –æ—Ç–≤–µ—Ç—É?
–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–º—É–ª—è—Ü–∏–∏ –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
–≠—Ç–æ—Ç —ç—Ç–∞–ø –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–í—ã–π–¥–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞¬ª, ¬´–ü–æ–¥–≥–æ—Ç–æ–≤—å —Å–≤–æ–¥–∫—É¬ª. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∏–µ–ª—Ç–æ—Ä–∞ (–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞, –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –§–∏–Ω–∞–Ω—Å—ã, –ì–µ–æ–≥—Ä–∞—Ñ–∏—è, –î–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –°—Ä–æ—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ).
`
                },
                ...messages.map((v) => ({ role: (v.type === 'client' ? 'user' : 'assistant') as "user" | "assistant" | "system", text: v.message }))
              ]);
                //const gptResponse = await getYandexGPTResponse(prompt);

              if (gptResponse) {

                const r = await ctx.reply(gptResponse?.text + `\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${(parseInt((gptResponse?.totalUsage || '0').toString()) / 50).toFixed(2)} –∫–æ–ø`);
                
                await addChatMessage(ctx.chat?.id?.toString() || '0', r.message_id.toString() || '0', gptResponse?.text || '0', 'bot');
                    
                } else {
                    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT.');
                }
            } catch (error) {
                console.error('Error processing Yandex GPT request:', error);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT.');
            }
        } else {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ "y:". –ù–∞–ø—Ä–∏–º–µ—Ä: y: —Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç');
        }
    } else {
      }
});



// ID –≤–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ Yandex Cloud
const FOLDER_ID = process.env.YC_FOLDER_ID; // –õ—É—á—à–µ –≤—Å–µ–≥–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏

let dbDriver: Driver | undefined;
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Cloud Function
export async function handler(event: any, context?: any) {
  const iamToken = iam(context);
  /*DB
  console.log('Received event:', JSON.stringify(event));
  const YDB_DATABASE = process.env.YDB_DATABASE;
  if (!YDB_DATABASE) {
    console.error('YDB_DATABASE is not set');
    process.exit(1);
  }
  const YDB_ENDPOINT = process.env.YDB_ENDPOINT;
  if (!YDB_ENDPOINT) {
    console.error('YDB_ENDPOINT is not set');
    process.exit(1);
  }
  const logger = {
    info: console.info,
    warn: console.warn,
    error: console.error,
    debug: console.debug,
    fatal: console.error, // Map fatal to console.error
    trace: console.trace,
  } as Logger;

  const authService = iamToken ? new TokenAuthService(iamToken) : new MetadataAuthService();
  // iamToken 
  //   ? new TokenAuthService(iamToken) // –ò—Å–ø–æ–ª—å–∑—É–µ–º TokenAuthService
  //   : getCredentialsFromEnv(logger);
    console.log('IAM token:', iamToken);
  //const driver = new Driver({ connectionString: YDB_CONNECTION_STRING, authService, logger });
  const driver = new Driver({
  endpoint: YDB_ENDPOINT,
  database: YDB_DATABASE,
  authService, // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π IAM –≤ Cloud Function
});
  try {
    const timeout = 10000; // 10 seconds
    if (!await driver.ready(timeout)) {
      console.error(`Driver has not become ready in ${timeout}ms!`);
      process.exit(1);
    }
    console.log('Driver is ready!');

    await driver.tableClient.withSession(async (session) => {
      console.log('Session created. Executing simple query...');
      const result = await session.executeQuery('SELECT 1 AS test_value;');
      console.log('Query executed. Result:', JSON.stringify(result));
    });
    console.log('Successfully connected and executed query.');
  } catch (error) {
    console.error('Error during YDB operation:', error);
  } finally {
    await driver.destroy();
    console.log('Driver destroyed.');
  }
  */
  
    console.log('Received event:', JSON.stringify(event));
    
    setIamToken(iamToken);
    
    try {
        if (!botInitialized) {
            await initializeBot();
        }
        if (!dbDriver) {
          dbDriver = await getDriver(iamToken || undefined);
          await ensureChatsTableExists();
        }

        if (!event.body) {
            console.error('Event body is missing');
            return { statusCode: 400, body: 'Event body is missing' };
        }
        
        let updateString = event.body;
        if (typeof event.body !== 'string') {
            updateString = JSON.stringify(event.body);
        }
        const update = JSON.parse(updateString);
      console.log('Parsed update:', JSON.stringify(update));

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º business_message –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        if (update.business_message) {
            update.message = {
                ...update.business_message,
                business_connection_id: update.business_message.business_connection_id
            };
        }

        await bot.handleUpdate(update);
        return { statusCode: 200, body: 'OK' };

    } catch (err: any) {
        console.error('Error in handler:', err);
        const errorMessage = err.message || 'Unknown error';
        const errorStack = err.stack || 'No stack trace';
        console.error(`Error message: ${errorMessage}, Stack: ${errorStack}`);
        return { statusCode: 500, body: `Error processing update: ${errorMessage}` };
    }
  
}


// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–∞—à–µ–π –ª–æ–≥–∏–∫–µ:
/*
async function handleUpdate(ctx: any) {
  // ... existing code ...
  try {
    // –ü—Ä–∏–º–µ—Ä: —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î –ª—É—á—à–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
    const createTableQuery = `
      CREATE TABLE IF NOT EXISTS example_table (
        id Uint64,
        value String,
        PRIMARY KEY (id)
      );
    `;
    await executeQuery(createTableQuery);
    console.log('Table created or already exists.');

    // –ü—Ä–∏–º–µ—Ä: –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const upsertQuery = `
      UPSERT INTO example_table (id, value) VALUES (1, "Hello YDB!");
    `;
    await executeQuery(upsertQuery);
    console.log('Data upserted.');

    // –ü—Ä–∏–º–µ—Ä: —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const selectQuery = 'SELECT * FROM example_table WHERE id = 1;';
    const result = await executeQuery(selectQuery);
    console.log('Selected data:', JSON.stringify(result.resultSets[0]));

    await ctx.reply('–ü—Ä–æ–≤–µ—Ä–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YDB –∏ –≤—ã–ø–æ–ª–Ω–∏–ª —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã!');
  } catch (error) {
    console.error('YDB Error:', error);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å YDB.');
  }
}
*/