import { Bot, Context, HearsContext, InlineKeyboard, MiddlewareFn } from 'grammy'; // webhookCallback —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ handler
import fs from 'fs';
import path from 'path';
import { getYandexGPTResponse, setIamToken } from './gpt'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
import { addChatMessage, ChatMessageType, clearChatMessages, closeDriver, ensureChatsTableExists, getDriver, getLastChatMessages } from './ydb'; // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç

import { iam } from './iam';
import { Driver } from 'ydb-sdk';
import { imitateTyping } from './telegram-utils';

const botToken = process.env.BOT_TOKEN;
if (!botToken) {
  throw new Error('BOT_TOKEN must be provided!');
}
const bot = new Bot(botToken);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
let botInitialized = false;

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
async function initializeBot() {
  if (botInitialized) return;
  try {
    console.log('Initializing bot...');
    await bot.init(); // –Ø–≤–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å botInfo (ctx.me)
    console.log(`Bot initialized: ${bot.botInfo.username} (ID: ${bot.botInfo.id})`);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞
    // –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ bot.init(), —Ç–∞–∫ –∫–∞–∫ bot.api –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≥–æ—Ç–æ–≤
    await bot.api.setMyCommands([
      { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
      { command: 'help', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É' },
      { command: 'clients', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤' }
    ]);
    console.log('Bot commands set.');
    botInitialized = true;
  } catch (error) {
    console.error('Failed to initialize bot or set commands:', error);
    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏, –º–æ–∂–Ω–æ –ª–∏–±–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, –ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–º–∞–Ω–¥
    // throw error; // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–Ω–∞
  }
}

interface Client { 
  id: string;
  firstName: string;
  lastName: string;
  category: 'buyer' | 'seller';
  status: 'active' | 'archived' | 'banned';
  username?: string;
  propertyInfo: {
    type: string;
    requirements?: string;
    description?: string;
    price?: number;
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
const loadClients = (): Client[] => {
  try {
    const filePath = path.resolve(__dirname, 'clients.json'); // –ü—É—Ç—å —Ç–µ–ø–µ—Ä—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ __dirname –≤–Ω—É—Ç—Ä–∏ src
    const fileContent = fs.readFileSync(filePath, 'utf-8');
    return JSON.parse(fileContent) as Client[];
  } catch (error) {
    console.error('Error loading clients.json:', error);
    return [];
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  // ctx.me —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω, –µ—Å–ª–∏ initializeBot() –±—ã–ª –≤—ã–∑–≤–∞–Ω
  const firstName = ctx.from?.first_name || '—Ä–∏–µ–ª—Ç–æ—Ä';
  const botUsername = ctx.me?.username || 'your_bot_username'; // –î–æ–±–∞–≤–∏–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
  const botLink = `https://t.me/${botUsername}`;
  const qrCodeUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(botLink)}`;

  await ctx.replyWithPhoto(qrCodeUrl, {
    caption: `–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã\n\n–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–∞–±–æ—Ç–µ —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.`
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', async (ctx) => {
  await ctx.reply(
    '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
    '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
    '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +
    '/clients - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤'
  );
  //await handleUpdate(ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ /clients
bot.command('clients', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', 'active_clients').row()
    .text('–ê—Ä—Ö–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', 'archived_clients').row()
    .text('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', 'blocked_clients');
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤:', { reply_markup: keyboard });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ (callback_query)
bot.callbackQuery('active_clients', async (ctx) => {
  await ctx.answerCallbackQuery();
  const clients = loadClients();
  const activeClients = clients.filter(client => client.status === 'active');

  if (activeClients.length === 0) {
    await ctx.reply('–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç.');
    return;
  }

  const keyboard = new InlineKeyboard();
  activeClients.forEach(client => {
    keyboard.text(`${client.firstName} ${client.lastName}`, `client_${client.id}`).row();
  });

  await ctx.reply('–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:', { reply_markup: keyboard });
});

bot.callbackQuery('archived_clients', async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.reply('–°–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:');
  // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
});

bot.callbackQuery('blocked_clients', async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.reply('–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:');
  // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (callback_query —Å regex)
bot.callbackQuery(/client_(.+)/, async (ctx) => {
  await ctx.answerCallbackQuery();
  const clientId = ctx.match[1];
  const clients = loadClients();
  const client = clients.find(c => c.id === clientId);

  if (client) {
    let message = `*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ ${client.firstName} ${client.lastName}*\n\n` +
                  `*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${client.category === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å' : '–ü—Ä–æ–¥–∞–≤–µ—Ü'}\n` +
                  `*–°—Ç–∞—Ç—É—Å:* ${client.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : client.status === 'archived' ? '–ê—Ä—Ö–∏–≤–Ω—ã–π' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n`;

    if (client.propertyInfo) {
      message += `\n*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–∫—Ç—É:*\n`;
      if (client.propertyInfo.type) message += `  –¢–∏–ø: ${client.propertyInfo.type}\n`;
      if (client.propertyInfo.requirements) message += `  –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${client.propertyInfo.requirements}\n`;
      if (client.propertyInfo.description) message += `  –û–ø–∏—Å–∞–Ω–∏–µ: ${client.propertyInfo.description}\n`;
      if (client.propertyInfo.price) message += `  –¶–µ–Ω–∞: ${client.propertyInfo.price}\n`;
    }

    const keyboard = new InlineKeyboard();
    if (client.username) {
      keyboard.url(`–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —Å ${client.firstName}`, `https://t.me/${client.username.startsWith('@') ? client.username.substring(1) : client.username}`);
    }

    if (keyboard.inline_keyboard.length > 0) {
      await ctx.reply(message, { parse_mode: 'Markdown', reply_markup: keyboard });
    } else {
      await ctx.reply(message, { parse_mode: 'Markdown' });
    }
  } else {
    await ctx.reply('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }
});

bot.hears(/^:(\w+)\s*(.*)$/i, async (ctx) => {
  const command = ctx.match[1]; // –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Å–ª–µ ':'
  const textAfterColon = ctx.match[2]; // —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–æ–±–µ–ª–æ–≤
  switch (command) {
    case 'clear': {
      await clearHandler(ctx);
    } break;
    case 'last': {
      let n = 20;
      try {
        n = parseInt(textAfterColon);
        if (isNaN(n)) {
          n = 20;
        }
      } catch (error) {
        console.log(`textAfterColon: ${textAfterColon}`);
        console.error('Error parsing last count:', JSON.stringify(error));
      }
      await lastHandler(ctx, n);
    } break;
    default: {
      await helpHandler(ctx);
    } break;
  }
});

async function helpHandler(ctx: Context) {
  await ctx.reply('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n /clear: - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ \n /last: - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π');
}

async function clearHandler(ctx: Context) {
  const currentChatId = ctx.chat?.id.toString();
  try {
    if (currentChatId) {
      await clearChatMessages(currentChatId);
      await ctx.reply(`–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ ${currentChatId} –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.`);
      console.info(`Successfully cleared messages for chatId: ${currentChatId}`);
    }
      
  } catch (error) {
      console.error(`Error processing clear_chat:`, error);
      await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ ${currentChatId}.`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
bot.hears(/^clear:/, clearHandler);

async function lastHandler(ctx: Context, n = 20): Promise<void> {
  console.log('Received "last:" command:', JSON.stringify(ctx));
  const chatId = ctx.chat?.id;

  if (!chatId) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —á–∞—Ç–∞.');
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º iamToken, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è getLastTenChatMessages
    // –í –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º getLastTenChatMessages iamToken –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω, 
    // –Ω–æ –µ—Å–ª–∏ –±—ã –æ–Ω –±—ã–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –µ–≥–æ –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–¥–µ—Å—å, 
    // –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ context –≤ serverless-—Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º.
    const messages = await getLastChatMessages(chatId.toString(), n);

    if (messages.length === 0) {
      await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç.');
      return;
    }

    let replyText = `–ü–æ—Å–ª–µ–¥–Ω–∏–µ ${n} —Å–æ–æ–±—â–µ–Ω–∏–π:\n`;
    messages.forEach(msg => {
      const date = new Date(msg.timestamp); // YDB timestamp is in microseconds
      replyText += `\n[${date.toLocaleString()}] ${msg.type}: ${msg.message}`;
    });

    await ctx.reply(replyText);

  } catch (error) {
    console.error(`Error fetching last ${n} chat messages:`, JSON.stringify(error));
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 'last:'
const lastMessagesRegex = /^last:/i;
bot.hears(lastMessagesRegex, (ctx)=>lastHandler(ctx));


// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å 'y:'
const yandexGptRegex = /^(.*)/i;
// –æ—Ç –±–æ—Ç–∞ –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç
bot.hears(yandexGptRegex, async (ctx) => {
    console.log('Received Yandex GPT command:', JSON.stringify(ctx));
  const businessConnectionId = ctx.businessConnectionId || ctx.message?.business_connection_id;
  let type: ChatMessageType;
  if (!businessConnectionId) {
    type = 'admin';
  } else if (ctx.from?.is_bot) {
    type = 'bot';
  } else if (ctx.from?.id === ctx.chat?.id) {
    type = 'client';
  } else {
    type = 'realtor'
  }
    await addChatMessage(ctx.chat?.id?.toString() || '0', ctx.message?.message_id?.toString() || '0', ctx.message?.text || '0', type);
    if (businessConnectionId && type === 'client') {
        const promptText = ctx.message?.text; // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª prompt –≤ promptText –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
        if (promptText) {
            try {

                if (!FOLDER_ID) {
                    console.error('Yandex Folder ID is not configured.');
                    await ctx.reply('–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: Yandex Folder ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
                    return;
                }

                const historyMessages = await getLastChatMessages(ctx.chat?.id?.toString() || '0', 20);
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ getYandexGPTResponse
                const gptMessages = historyMessages.map((v) => ({
                    role: (v.type === 'client' ? 'user' : 'assistant') as 'user' | 'assistant',
                    text: v.message
                }));
                
                const currentUserData = loadUserData(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π currentUserData
                const gptResponse = await getYandexGPTResponse(gptMessages, currentUserData); 
                
                if (gptResponse && gptResponse.text) {
                

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                const textToReply = gptResponse.text;
                const startDelay = promptText.length * 100 + 2000; // Changed from prompt.length
                const delay = textToReply.length * 200; // 300 –º—Å –Ω–∞ —Å–∏–º–≤–æ–ª
                await imitateTyping(ctx, startDelay, delay);

                const r = await ctx.reply(textToReply + `\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${(parseInt((gptResponse?.totalUsage || '0').toString()) / 50).toFixed(2)} –∫–æ–ø`);
                
                await addChatMessage(ctx.chat?.id?.toString() || '0', r.message_id.toString() || '0', textToReply, 'bot');
                    
              } else {
                    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT.');
                }
            } catch (error) {
                console.error('Error processing Yandex GPT request:', JSON.stringify(error));
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT.');
            }
        } else {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ "y:". –ù–∞–ø—Ä–∏–º–µ—Ä: y: —Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç');
        }
    } else {
      }
});



// ID –≤–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ Yandex Cloud
const FOLDER_ID = process.env.YC_FOLDER_ID; // –õ—É—á—à–µ –≤—Å–µ–≥–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏

let dbDriver: Driver | undefined;
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Cloud Function
export async function handler(event: any, context?: any) {
  const iamToken = iam(context);
  
    console.log('Received event:', JSON.stringify(event));
    
    setIamToken(iamToken);
    
    try {
        if (!botInitialized) {
            await initializeBot();
        }
        if (!dbDriver) {
          dbDriver = await getDriver(iamToken || undefined);
          await ensureChatsTableExists();
        }

        if (!event.body) {
            console.error('Event body is missing');
            return { statusCode: 400, body: 'Event body is missing' };
        }
        
        let updateString = event.body;
        if (typeof event.body !== 'string') {
            updateString = JSON.stringify(event.body);
        }
        const update = JSON.parse(updateString);
      console.log('Parsed update:', JSON.stringify(update));

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º business_message –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        if (update.business_message) {
            update.message = {
                ...update.business_message,
                business_connection_id: update.business_message.business_connection_id
            };
        }

        await bot.handleUpdate(update);
        return { statusCode: 200, body: 'OK' };

    } catch (err: any) {
        console.error('Error in handler:', err);
        const errorMessage = err.message || 'Unknown error';
        const errorStack = err.stack || 'No stack trace';
        console.error(`Error message: ${errorMessage}, Stack: ${errorStack}`);
        return { statusCode: 500, body: `Error processing update: ${errorMessage}` };
    }
  
}

interface UserDataItem {
    name: string;
    value: string;
}

let userData: UserDataItem[] | null = null;

function loadUserData(): UserDataItem[] {
    if (userData) {
        return userData;
    }
    try {
        const userConfigPath = path.resolve(__dirname, 'user.json');
        const userConfigFile = fs.readFileSync(userConfigPath, 'utf-8');
        userData = JSON.parse(userConfigFile) as UserDataItem[];
        return userData;
    } catch (error) {
        console.error('Failed to load user.json:', error);
        return [];
    }
}