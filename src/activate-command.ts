import { Bot, CommandContext, Context } from 'grammy';
import { setMode } from './ydb';
import { formatMarkdownV2Text, escapeMarkdownV2, isUserProfileComplete } from './telegram-utils';

/**
 * –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è MarkdownV2 —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
 */
export function createActivationMarkdownV2Message(ctx: CommandContext<Context>) {
    const title = formatMarkdownV2Text('–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏!', { bold: true });
    const final = formatMarkdownV2Text('–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —à–∞–≥–æ–≤ –±–æ—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!', { bold: true });
    
    return (
		`üöÄ ${title}\n` +
		
        `1Ô∏è‚É£ ${escapeMarkdownV2('–ü–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—à –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç –≤ Telegram')}\n` +
        `2Ô∏è‚É£ ${escapeMarkdownV2('–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ @'+(ctx.me?.username || '—ç—Ç–æ–≥–æ_–±–æ—Ç–∞')+' –∫ –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É\n')}` +
        `3Ô∏è‚É£ ${escapeMarkdownV2('–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–æ—Å—Ç—É–ø–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–∏—Ö')}\n` +
        `4Ô∏è‚É£ ${escapeMarkdownV2(`–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: @${ctx.from?.username === 'realtoririnapetrova' ? 'petrovpaveld' : 'realtoririnapetrova'} —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –±–æ—Ç–∞ –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É`)}\n`
			+`‚úÖ ${final}`
    );
}

export function initializeActivateCommand(bot: Bot) {
    bot.command('activate', async (ctx) => {
        const userId = ctx.from?.id;
        if (!userId) {
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.');
            return;
        }

        if (!(await isUserProfileComplete(userId))) {
            await ctx.api.sendMessage(userId, '–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, –ø—Ä–æ–π–¥—è –æ–ø—Ä–æ—Å–Ω–∏–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /quiz');
            return;
        }

        try {
            await setMode(userId, 'activation');
            await ctx.reply(
                createActivationMarkdownV2Message(ctx),
                { parse_mode: 'MarkdownV2' }
            );
            
        } catch (error) {
            console.error('Error in activate command:', JSON.stringify(error));
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    });
}