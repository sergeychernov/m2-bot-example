import { bot } from './bot-instance';
import { iam } from './iam';
import { getUserIdByBusinessConnectionId } from './users';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ SpeechKit
interface SpeechKitResponse {
    result?: {
        alternatives?: Array<{
            words?: Array<{
                word: string;
                startTime: string;
                endTime: string;
                confidence: number;
            }>;
            text: string;
            confidence: number;
        }>;
    };
    error?: {
        code: number;
        message: string;
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ SpeechKit
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ MIME-—Ç–∏–ø—É
function getFormatFromMimeType(mimeType: string): { format: string; sampleRate?: string } {
    switch (mimeType) {
        case 'audio/ogg':
        case 'audio/ogg; codecs=opus':
            // –î–ª—è oggopus –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º sampleRateHertz - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 48000
            return { format: 'oggopus' };
        case 'audio/mpeg':
        case 'audio/mp3':
            // MP3 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ lpcm
            return { format: 'lpcm', sampleRate: '16000' };
        case 'audio/wav':
        case 'audio/wave':
        case 'audio/x-wav':
            return { format: 'lpcm', sampleRate: '16000' };
        case 'audio/webm':
        case 'audio/webm; codecs=opus':
            return { format: 'oggopus' };
        default:
            console.warn(`Unknown MIME type: ${mimeType}, defaulting to oggopus`);
            return { format: 'oggopus' };
    }
}

export async function recognizeSpeech(audioBuffer: ArrayBuffer, mime_type: string, iamToken: string): Promise<string | null> {
    try {
        console.log('Starting speech recognition...');
        console.log('IAM token length:', iamToken ? iamToken.length : 'null');
        console.log('Audio buffer size:', audioBuffer.byteLength);
        console.log('MIME type:', mime_type);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        const { format, sampleRate } = getFormatFromMimeType(mime_type);
        console.log(`Using format: ${format}${sampleRate ? `, sample rate: ${sampleRate}` : ' (default sample rate)'}`);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        const url = new URL('https://stt.api.cloud.yandex.net/speech/v1/stt:recognize');
        url.searchParams.set('topic', 'general');
        url.searchParams.set('lang', 'ru-RU');
        url.searchParams.set('format', format);
        
        // sampleRateHertz —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è lpcm —Ñ–æ—Ä–º–∞—Ç–∞
        if (format === 'lpcm' && sampleRate) {
            url.searchParams.set('sampleRateHertz', sampleRate);
        }
        
        console.log('Sending request to SpeechKit...');
        console.log('URL:', url.toString());
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–∏—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        const response = await fetch(url.toString(), {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${iamToken}`,
                'Content-Type': 'application/octet-stream'
            },
            body: audioBuffer // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é ArrayBuffer, –∞ –Ω–µ FormData
        });
        
        console.log('Response status:', response.status);
        console.log('Response headers:', JSON.stringify(Object.fromEntries(response.headers.entries())));
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('SpeechKit API error details:');
            console.error('Status:', response.status);
            console.error('Status text:', response.statusText);
            console.error('Error body:', errorText);
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if (response.status === 401) {
                console.error('Authorization failed. Check:');
                console.error('1. IAM token validity');
                console.error('2. Service account roles: ai.speechkit-stt.user, ai.languageModels.user');
                console.error('3. Folder permissions');
            }
            
            throw new Error(`SpeechKit API error: ${response.status} ${errorText}`);
        }
        
        const result = await response.json();
        console.log('Response body:', JSON.stringify(result));
        
        if (result.error_code) {
            console.error('SpeechKit recognition error:', result.error_message);
            return null;
        }
        
        if (result.result) {
            console.log('Recognized text:', result.result);
            return result.result;
        }
        
        console.log('No recognition result found');
        return null;
    } catch (error) {
        console.error('Error in speech recognition:', error);
        throw error;
    }
}

export async function handleVoiceMessage(fileId: string, chatId: number, mime_type:string, businessConnectionId?: string, context?: any) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º IAM —Ç–æ–∫–µ–Ω
        const iamToken = iam(context);
        if (!iamToken) {
            throw new Error('IAM token not available');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        const file = await bot.api.getFile(fileId);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
        
        console.log('Voice file URL:', fileUrl);
        console.log('File size:', file.file_size);
		console.log('File path:', file.file_path);
		
		console.log('File:', JSON.stringify(file));
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const response = await fetch(fileUrl);
        if (!response.ok) {
            throw new Error(`Failed to download file: ${response.statusText}`);
        }
        
        const audioBuffer = await response.arrayBuffer();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ SpeechKit
        const recognizedText = await recognizeSpeech(audioBuffer, mime_type, iamToken);
        
        if (recognizedText) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            // const replyText = `üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: "${recognizedText}"`;
            
            // if (businessConnectionId) {
            //     await bot.api.sendMessage(chatId, replyText, { 
            //         business_connection_id: businessConnectionId 
            //     });
            // } else {
            //     await bot.api.sendMessage(chatId, replyText);
            // }
            
            return {
                fileUrl,
                audioBuffer,
                fileInfo: file,
                recognizedText
            };
        } else {
            // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
            const errorText = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏';
            
            if (businessConnectionId) {
                // –ü–æ–ª—É—á–∞–µ–º userId –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ –ø–æ businessConnectionId
                const userId = await getUserIdByBusinessConnectionId(businessConnectionId);
                if (userId) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
                    await bot.api.sendMessage(userId, errorText);
                } else {
                    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ userId –¥–ª—è businessConnectionId:', businessConnectionId);
                }
            } else {
                await bot.api.sendMessage(chatId, errorText);
            }
            
            return {
                fileUrl,
                audioBuffer,
                fileInfo: file,
                recognizedText: null
            };
        }
        
    } catch (error) {
        console.error('Error handling voice message:', error);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const errorText = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è';
        try {
            if (businessConnectionId) {
                await bot.api.sendMessage(chatId, errorText, { 
                    business_connection_id: businessConnectionId 
                });
            } else {
                await bot.api.sendMessage(chatId, errorText);
            }
        } catch (sendError) {
            console.error('Error sending error message:', sendError);
        }
        
        throw error;
    }
}